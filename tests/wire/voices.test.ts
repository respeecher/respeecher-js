/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { RespeecherClient } from "../../src/Client";

describe("Voices", () => {
    test("List", async () => {
        const server = mockServerPool.createServer();
        const client = new RespeecherClient({
            apiKey: "test",
            environment: { base: server.baseUrl, ws: server.baseUrl },
        });

        const rawResponseBody = [
            {
                id: "samantha",
                gender: "female",
                accent: "American",
                sampling_params: {
                    temperature: 0.6,
                    top_k: -1,
                    top_p: 0.8,
                    min_p: 1,
                    repetition_penalty: 2,
                    frequency_penalty: 2,
                },
            },
            {
                id: "volodymyr",
                gender: "male",
                accent: "Ukrainian",
                sampling_params: {
                    temperature: 0.4,
                    top_k: -1,
                    top_p: 0.8,
                    min_p: 1,
                    repetition_penalty: 2,
                    frequency_penalty: 2,
                },
            },
        ];
        server.mockEndpoint().get("/voices").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.voices.list();
        expect(response).toEqual([
            {
                id: "samantha",
                gender: "female",
                accent: "American",
                samplingParams: {
                    temperature: 0.6,
                    topK: -1,
                    topP: 0.8,
                    minP: 1,
                    repetitionPenalty: 2,
                    frequencyPenalty: 2,
                },
            },
            {
                id: "volodymyr",
                gender: "male",
                accent: "Ukrainian",
                samplingParams: {
                    temperature: 0.4,
                    topK: -1,
                    topP: 0.8,
                    minP: 1,
                    repetitionPenalty: 2,
                    frequencyPenalty: 2,
                },
            },
        ]);
    });
});
