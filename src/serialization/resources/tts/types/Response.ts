/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index.js";
import * as Respeecher from "../../../../api/index.js";
import * as core from "../../../../core/index.js";
import { ContextfulChunk } from "./ContextfulChunk.js";
import { Done } from "./Done.js";
import { StreamingError } from "./StreamingError.js";

export const Response: core.serialization.Schema<serializers.tts.Response.Raw, Respeecher.tts.Response> =
    core.serialization
        .union("type", {
            chunk: ContextfulChunk,
            done: Done,
            error: StreamingError,
        })
        .transform<Respeecher.tts.Response>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace Response {
    export type Raw = Response.Chunk | Response.Done | Response.Error;

    export interface Chunk extends ContextfulChunk.Raw {
        type: "chunk";
    }

    export interface Done extends Done.Raw {
        type: "done";
    }

    export interface Error extends StreamingError.Raw {
        type: "error";
    }
}
