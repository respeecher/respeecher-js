/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as RespeecherApi from "../../../index.js";
import * as stream from "stream";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";
import * as qs from "qs";
import { TtsSocket } from "./Socket.js";

export declare namespace Tts {
    export interface Options {
        environment?: core.Supplier<environments.RespeecherApiEnvironment | environments.RespeecherApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }

    export interface ConnectArgs {
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, unknown>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class Tts {
    constructor(protected readonly _options: Tts.Options = {}) {}

    /**
     * The easiest way to generate text-to-speech audio. Not suitable for latency-sensitive applications.
     */
    public bytes(
        request: RespeecherApi.tts.OfflineGenerationRequest,
        requestOptions?: Tts.RequestOptions,
    ): core.HttpResponsePromise<stream.Readable> {
        return core.HttpResponsePromise.fromPromise(this.__bytes(request, requestOptions));
    }

    private async __bytes(
        request: RespeecherApi.tts.OfflineGenerationRequest,
        requestOptions?: Tts.RequestOptions,
    ): Promise<core.WithRawResponse<stream.Readable>> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.RespeecherApiEnvironment.PublicEnRt
                    ).base,
                "/tts/bytes",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@respeecher/respeecher-js",
                "X-Fern-SDK-Version": "0.0.79",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RespeecherApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RespeecherApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.RespeecherApiTimeoutError("Timeout exceeded when calling POST /tts/bytes.");
            case "unknown":
                throw new errors.RespeecherApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Stream text-to-speech audio as JSONL (JSON lines) objects over HTTP. A less performant alternative to WebSockets, without text input streaming.
     */
    public sse(
        request: RespeecherApi.tts.StreamingGenerationRequest,
        requestOptions?: Tts.RequestOptions,
    ): core.HttpResponsePromise<core.Stream<RespeecherApi.tts.ServerSentEvent>> {
        return core.HttpResponsePromise.fromPromise(this.__sse(request, requestOptions));
    }

    private async __sse(
        request: RespeecherApi.tts.StreamingGenerationRequest,
        requestOptions?: Tts.RequestOptions,
    ): Promise<core.WithRawResponse<core.Stream<RespeecherApi.tts.ServerSentEvent>>> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.RespeecherApiEnvironment.PublicEnRt
                    ).base,
                "/tts/sse",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@respeecher/respeecher-js",
                "X-Fern-SDK-Version": "0.0.79",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            responseType: "sse",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: new core.Stream({
                    stream: _response.body,
                    parse: (data) => data as any,
                    signal: requestOptions?.abortSignal,
                    eventShape: {
                        type: "json",
                        messageTerminator: "\n",
                    },
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RespeecherApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RespeecherApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.RespeecherApiTimeoutError("Timeout exceeded when calling POST /tts/sse.");
            case "unknown":
                throw new errors.RespeecherApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    public async connect(args: Tts.ConnectArgs = {}): Promise<TtsSocket> {
        const queryParams: Record<string, unknown> = {};
        let websocketHeaders: Record<string, unknown> = {};
        websocketHeaders = {
            ...websocketHeaders,
            ...(await this._getCustomAuthorizationHeaders()),
        };
        websocketHeaders = {
            ...websocketHeaders,
            ...args.headers,
        };
        const socket = new core.ReconnectingWebSocket(
            `${(await core.Supplier.get(this._options.baseUrl)) ?? ((await core.Supplier.get(this._options.environment)) ?? environments.RespeecherApiEnvironment.PublicEnRt).ws}/tts/websocket?${qs.stringify(queryParams, { arrayFormat: "repeat" })}`,
            [],
            { debug: args.debug ?? false, maxRetries: args.reconnectAttempts ?? 30 },
            websocketHeaders,
        );
        return new TtsSocket({ socket });
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["RESPEECHER_API_KEY"];
        return { "X-API-Key": apiKeyValue };
    }
}
