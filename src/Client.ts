/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { Tts } from "./api/resources/tts/client/Client.js";
import { Voices } from "./api/resources/voices/client/Client.js";

export declare namespace RespeecherApiClient {
    export interface Options {
        environment?: core.Supplier<environments.RespeecherApiEnvironment | environments.RespeecherApiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class RespeecherApiClient {
    protected _tts: Tts | undefined;
    protected _voices: Voices | undefined;

    constructor(protected readonly _options: RespeecherApiClient.Options = {}) {}

    public get tts(): Tts {
        return (this._tts ??= new Tts(this._options));
    }

    public get voices(): Voices {
        return (this._voices ??= new Voices(this._options));
    }
}
