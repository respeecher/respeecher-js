/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Tts } from "./api/resources/tts/client/Client.js";
import { Voices } from "./api/resources/voices/client/Client.js";

export declare namespace RespeecherClient {
    export interface Options {
        environment?: core.Supplier<environments.RespeecherEnvironment | environments.RespeecherEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class RespeecherClient {
    protected readonly _options: RespeecherClient.Options;
    protected _tts: Tts | undefined;
    protected _voices: Voices | undefined;

    constructor(_options: RespeecherClient.Options = {}) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@respeecher/respeecher-js",
                    "X-Fern-SDK-Version": "0.0.87",
                    "User-Agent": "@respeecher/respeecher-js/0.0.87",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get tts(): Tts {
        return (this._tts ??= new Tts(this._options));
    }

    public get voices(): Voices {
        return (this._voices ??= new Voices(this._options));
    }
}
